
ATmega328p_HAL_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000058a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800100  00800100  000005fe  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  000005fe  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000150  00000000  00000000  0000062e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00001174  00000000  00000000  0000077e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000463  00000000  00000000  000018f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000075e  00000000  00000000  00001d55  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000430  00000000  00000000  000024b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000063a  00000000  00000000  000028e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000096d  00000000  00000000  00002f1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000100  00000000  00000000  0000388b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 5f 01 	jmp	0x2be	; 0x2be <__vector_1>
   8:	0c 94 9f 01 	jmp	0x33e	; 0x33e <__vector_2>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__vector_11>
  30:	0c 94 b1 00 	jmp	0x162	; 0x162 <__vector_12>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__vector_14>
  3c:	0c 94 27 01 	jmp	0x24e	; 0x24e <__vector_15>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 a9 01 	jmp	0x352	; 0x352 <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <__vector_20>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 70 00 	call	0xe0	; 0xe0 <main>
  88:	0c 94 c3 02 	jmp	0x586	; 0x586 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <HAL_Init>:
		//-------------------------------------------------------//
    }
}
//--------/* ATmega328p Initial Periphery */-------------------//
void HAL_Init()
{	
  90:	0f 93       	push	r16
//--------------- USER CODE BEGIN --------------------------//
//TODO:: Please write your application code

	HAL_TIM0_Init(127,255,1,1,0);	
  92:	00 e0       	ldi	r16, 0x00	; 0
  94:	21 e0       	ldi	r18, 0x01	; 1
  96:	41 e0       	ldi	r20, 0x01	; 1
  98:	6f ef       	ldi	r22, 0xFF	; 255
  9a:	8f e7       	ldi	r24, 0x7F	; 127
  9c:	0e 94 5d 02 	call	0x4ba	; 0x4ba <HAL_TIM0_Init>
	HAL_TIM1_Init(0xF424,0x7A12,1,1,0);
  a0:	21 e0       	ldi	r18, 0x01	; 1
  a2:	41 e0       	ldi	r20, 0x01	; 1
  a4:	62 e1       	ldi	r22, 0x12	; 18
  a6:	7a e7       	ldi	r23, 0x7A	; 122
  a8:	84 e2       	ldi	r24, 0x24	; 36
  aa:	94 ef       	ldi	r25, 0xF4	; 244
  ac:	0e 94 81 02 	call	0x502	; 0x502 <HAL_TIM1_Init>
	HAL_GDIO_PORT_Init(PORTB5, GDIO_DDR_B, OUTPUT);
  b0:	41 e0       	ldi	r20, 0x01	; 1
  b2:	64 e0       	ldi	r22, 0x04	; 4
  b4:	85 e0       	ldi	r24, 0x05	; 5
  b6:	0e 94 3c 02 	call	0x478	; 0x478 <HAL_GDIO_PORT_Init>
	HAL_GDIO_PORT_Init(PORTB4, GDIO_DDR_B, OUTPUT);
  ba:	41 e0       	ldi	r20, 0x01	; 1
  bc:	64 e0       	ldi	r22, 0x04	; 4
  be:	84 e0       	ldi	r24, 0x04	; 4
  c0:	0e 94 3c 02 	call	0x478	; 0x478 <HAL_GDIO_PORT_Init>
	HAL_GDIO_PORT_Init(PORTB3, GDIO_DDR_B, OUTPUT);
  c4:	41 e0       	ldi	r20, 0x01	; 1
  c6:	64 e0       	ldi	r22, 0x04	; 4
  c8:	83 e0       	ldi	r24, 0x03	; 3
  ca:	0e 94 3c 02 	call	0x478	; 0x478 <HAL_GDIO_PORT_Init>
	HAL_GDIO_PORT_Init(PORTB2, GDIO_DDR_B, OUTPUT);
  ce:	41 e0       	ldi	r20, 0x01	; 1
  d0:	64 e0       	ldi	r22, 0x04	; 4
  d2:	82 e0       	ldi	r24, 0x02	; 2
  d4:	0e 94 3c 02 	call	0x478	; 0x478 <HAL_GDIO_PORT_Init>
	HAL_GlobalInterrupt(GLOBAL_INT_ON);
  d8:	81 e0       	ldi	r24, 0x01	; 1
	//HAL_USART_Init(MYUBRR);
	//HAL_USART_TX_IT(ENABLE_IT);
	//HAL_USART_RX_IT(ENABLE_IT);
//--------------- USER CODE END ----------------------------//
//----------------------------------------------------------//
}
  da:	0f 91       	pop	r16
	HAL_TIM1_Init(0xF424,0x7A12,1,1,0);
	HAL_GDIO_PORT_Init(PORTB5, GDIO_DDR_B, OUTPUT);
	HAL_GDIO_PORT_Init(PORTB4, GDIO_DDR_B, OUTPUT);
	HAL_GDIO_PORT_Init(PORTB3, GDIO_DDR_B, OUTPUT);
	HAL_GDIO_PORT_Init(PORTB2, GDIO_DDR_B, OUTPUT);
	HAL_GlobalInterrupt(GLOBAL_INT_ON);
  dc:	0c 94 34 02 	jmp	0x468	; 0x468 <HAL_GlobalInterrupt>

000000e0 <main>:

//------------- USER CODE END ---------------------------//
//-------------------------------------------------------//
int main(void)
{
	HAL_Init();
  e0:	0e 94 48 00 	call	0x90	; 0x90 <HAL_Init>
  e4:	ff cf       	rjmp	.-2      	; 0xe4 <main+0x4>

000000e6 <__vector_11>:


//--------/* IRQ_Handler for interrupts */------------------//
//--------/*       USER CODE            */------------------//
	ISR(TIMER1_COMPA_vect)
	{
  e6:	1f 92       	push	r1
  e8:	0f 92       	push	r0
  ea:	0f b6       	in	r0, 0x3f	; 63
  ec:	0f 92       	push	r0
  ee:	11 24       	eor	r1, r1
  f0:	2f 93       	push	r18
  f2:	3f 93       	push	r19
  f4:	4f 93       	push	r20
  f6:	5f 93       	push	r21
  f8:	6f 93       	push	r22
  fa:	7f 93       	push	r23
  fc:	8f 93       	push	r24
  fe:	9f 93       	push	r25
 100:	af 93       	push	r26
 102:	bf 93       	push	r27
 104:	ef 93       	push	r30
 106:	ff 93       	push	r31
		HAL_GDIO_PORT_Write(GDIO_PORT_B, PORTB4, HIGH);
 108:	41 e0       	ldi	r20, 0x01	; 1
 10a:	64 e0       	ldi	r22, 0x04	; 4
 10c:	85 e0       	ldi	r24, 0x05	; 5
 10e:	0e 94 47 02 	call	0x48e	; 0x48e <HAL_GDIO_PORT_Write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 112:	2f e7       	ldi	r18, 0x7F	; 127
 114:	88 e3       	ldi	r24, 0x38	; 56
 116:	91 e0       	ldi	r25, 0x01	; 1
 118:	21 50       	subi	r18, 0x01	; 1
 11a:	80 40       	sbci	r24, 0x00	; 0
 11c:	90 40       	sbci	r25, 0x00	; 0
 11e:	e1 f7       	brne	.-8      	; 0x118 <__vector_11+0x32>
 120:	00 c0       	rjmp	.+0      	; 0x122 <__vector_11+0x3c>
 122:	00 00       	nop
		_delay_ms(50);
		HAL_GDIO_PORT_Write(GDIO_PORT_B, PORTB4, LOW);
 124:	40 e0       	ldi	r20, 0x00	; 0
 126:	64 e0       	ldi	r22, 0x04	; 4
 128:	85 e0       	ldi	r24, 0x05	; 5
 12a:	0e 94 47 02 	call	0x48e	; 0x48e <HAL_GDIO_PORT_Write>
 12e:	2f e7       	ldi	r18, 0x7F	; 127
 130:	88 e3       	ldi	r24, 0x38	; 56
 132:	91 e0       	ldi	r25, 0x01	; 1
 134:	21 50       	subi	r18, 0x01	; 1
 136:	80 40       	sbci	r24, 0x00	; 0
 138:	90 40       	sbci	r25, 0x00	; 0
 13a:	e1 f7       	brne	.-8      	; 0x134 <__vector_11+0x4e>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <__vector_11+0x58>
 13e:	00 00       	nop
		_delay_ms(50);
	}
 140:	ff 91       	pop	r31
 142:	ef 91       	pop	r30
 144:	bf 91       	pop	r27
 146:	af 91       	pop	r26
 148:	9f 91       	pop	r25
 14a:	8f 91       	pop	r24
 14c:	7f 91       	pop	r23
 14e:	6f 91       	pop	r22
 150:	5f 91       	pop	r21
 152:	4f 91       	pop	r20
 154:	3f 91       	pop	r19
 156:	2f 91       	pop	r18
 158:	0f 90       	pop	r0
 15a:	0f be       	out	0x3f, r0	; 63
 15c:	0f 90       	pop	r0
 15e:	1f 90       	pop	r1
 160:	18 95       	reti

00000162 <__vector_12>:
	ISR(TIMER1_COMPB_vect)
	{
 162:	1f 92       	push	r1
 164:	0f 92       	push	r0
 166:	0f b6       	in	r0, 0x3f	; 63
 168:	0f 92       	push	r0
 16a:	11 24       	eor	r1, r1
 16c:	2f 93       	push	r18
 16e:	3f 93       	push	r19
 170:	4f 93       	push	r20
 172:	5f 93       	push	r21
 174:	6f 93       	push	r22
 176:	7f 93       	push	r23
 178:	8f 93       	push	r24
 17a:	9f 93       	push	r25
 17c:	af 93       	push	r26
 17e:	bf 93       	push	r27
 180:	ef 93       	push	r30
 182:	ff 93       	push	r31
		HAL_GDIO_PORT_Write(GDIO_PORT_B, PORTB3, HIGH);
 184:	41 e0       	ldi	r20, 0x01	; 1
 186:	63 e0       	ldi	r22, 0x03	; 3
 188:	85 e0       	ldi	r24, 0x05	; 5
 18a:	0e 94 47 02 	call	0x48e	; 0x48e <HAL_GDIO_PORT_Write>
 18e:	2f e7       	ldi	r18, 0x7F	; 127
 190:	88 e3       	ldi	r24, 0x38	; 56
 192:	91 e0       	ldi	r25, 0x01	; 1
 194:	21 50       	subi	r18, 0x01	; 1
 196:	80 40       	sbci	r24, 0x00	; 0
 198:	90 40       	sbci	r25, 0x00	; 0
 19a:	e1 f7       	brne	.-8      	; 0x194 <__vector_12+0x32>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <__vector_12+0x3c>
 19e:	00 00       	nop
		_delay_ms(50);
		HAL_GDIO_PORT_Write(GDIO_PORT_B, PORTB3, LOW);
 1a0:	40 e0       	ldi	r20, 0x00	; 0
 1a2:	63 e0       	ldi	r22, 0x03	; 3
 1a4:	85 e0       	ldi	r24, 0x05	; 5
 1a6:	0e 94 47 02 	call	0x48e	; 0x48e <HAL_GDIO_PORT_Write>
 1aa:	2f e7       	ldi	r18, 0x7F	; 127
 1ac:	88 e3       	ldi	r24, 0x38	; 56
 1ae:	91 e0       	ldi	r25, 0x01	; 1
 1b0:	21 50       	subi	r18, 0x01	; 1
 1b2:	80 40       	sbci	r24, 0x00	; 0
 1b4:	90 40       	sbci	r25, 0x00	; 0
 1b6:	e1 f7       	brne	.-8      	; 0x1b0 <__vector_12+0x4e>
 1b8:	00 c0       	rjmp	.+0      	; 0x1ba <__vector_12+0x58>
 1ba:	00 00       	nop
		_delay_ms(50);
	}
 1bc:	ff 91       	pop	r31
 1be:	ef 91       	pop	r30
 1c0:	bf 91       	pop	r27
 1c2:	af 91       	pop	r26
 1c4:	9f 91       	pop	r25
 1c6:	8f 91       	pop	r24
 1c8:	7f 91       	pop	r23
 1ca:	6f 91       	pop	r22
 1cc:	5f 91       	pop	r21
 1ce:	4f 91       	pop	r20
 1d0:	3f 91       	pop	r19
 1d2:	2f 91       	pop	r18
 1d4:	0f 90       	pop	r0
 1d6:	0f be       	out	0x3f, r0	; 63
 1d8:	0f 90       	pop	r0
 1da:	1f 90       	pop	r1
 1dc:	18 95       	reti

000001de <__vector_14>:
	ISR(TIMER0_COMPA_vect)
	{
 1de:	1f 92       	push	r1
 1e0:	0f 92       	push	r0
 1e2:	0f b6       	in	r0, 0x3f	; 63
 1e4:	0f 92       	push	r0
 1e6:	11 24       	eor	r1, r1
 1e8:	2f 93       	push	r18
 1ea:	3f 93       	push	r19
 1ec:	4f 93       	push	r20
 1ee:	5f 93       	push	r21
 1f0:	6f 93       	push	r22
 1f2:	7f 93       	push	r23
 1f4:	8f 93       	push	r24
 1f6:	9f 93       	push	r25
 1f8:	af 93       	push	r26
 1fa:	bf 93       	push	r27
 1fc:	ef 93       	push	r30
 1fe:	ff 93       	push	r31
		/* IRQ_Handler: Timer 0 - Comp. A */
		//TODO:: Please write your application code
		HAL_GDIO_PORT_Write(GDIO_PORT_B, PORTB2, HIGH);
 200:	41 e0       	ldi	r20, 0x01	; 1
 202:	62 e0       	ldi	r22, 0x02	; 2
 204:	85 e0       	ldi	r24, 0x05	; 5
 206:	0e 94 47 02 	call	0x48e	; 0x48e <HAL_GDIO_PORT_Write>
 20a:	8f e1       	ldi	r24, 0x1F	; 31
 20c:	9e e4       	ldi	r25, 0x4E	; 78
 20e:	01 97       	sbiw	r24, 0x01	; 1
 210:	f1 f7       	brne	.-4      	; 0x20e <__vector_14+0x30>
 212:	00 c0       	rjmp	.+0      	; 0x214 <__vector_14+0x36>
 214:	00 00       	nop
		_delay_ms(10);
		HAL_GDIO_PORT_Write(GDIO_PORT_B, PORTB2, LOW);
 216:	40 e0       	ldi	r20, 0x00	; 0
 218:	62 e0       	ldi	r22, 0x02	; 2
 21a:	85 e0       	ldi	r24, 0x05	; 5
 21c:	0e 94 47 02 	call	0x48e	; 0x48e <HAL_GDIO_PORT_Write>
 220:	8f e1       	ldi	r24, 0x1F	; 31
 222:	9e e4       	ldi	r25, 0x4E	; 78
 224:	01 97       	sbiw	r24, 0x01	; 1
 226:	f1 f7       	brne	.-4      	; 0x224 <__vector_14+0x46>
 228:	00 c0       	rjmp	.+0      	; 0x22a <__vector_14+0x4c>
 22a:	00 00       	nop
		_delay_ms(10);
	}
 22c:	ff 91       	pop	r31
 22e:	ef 91       	pop	r30
 230:	bf 91       	pop	r27
 232:	af 91       	pop	r26
 234:	9f 91       	pop	r25
 236:	8f 91       	pop	r24
 238:	7f 91       	pop	r23
 23a:	6f 91       	pop	r22
 23c:	5f 91       	pop	r21
 23e:	4f 91       	pop	r20
 240:	3f 91       	pop	r19
 242:	2f 91       	pop	r18
 244:	0f 90       	pop	r0
 246:	0f be       	out	0x3f, r0	; 63
 248:	0f 90       	pop	r0
 24a:	1f 90       	pop	r1
 24c:	18 95       	reti

0000024e <__vector_15>:
	ISR(TIMER0_COMPB_vect)
	{
 24e:	1f 92       	push	r1
 250:	0f 92       	push	r0
 252:	0f b6       	in	r0, 0x3f	; 63
 254:	0f 92       	push	r0
 256:	11 24       	eor	r1, r1
 258:	2f 93       	push	r18
 25a:	3f 93       	push	r19
 25c:	4f 93       	push	r20
 25e:	5f 93       	push	r21
 260:	6f 93       	push	r22
 262:	7f 93       	push	r23
 264:	8f 93       	push	r24
 266:	9f 93       	push	r25
 268:	af 93       	push	r26
 26a:	bf 93       	push	r27
 26c:	ef 93       	push	r30
 26e:	ff 93       	push	r31
		/* IRQ_Handler: Timer 0 - Comp. B */
		//TODO:: Please write your application code
		HAL_GDIO_PORT_Write(GDIO_PORT_B, PORTB5, HIGH);
 270:	41 e0       	ldi	r20, 0x01	; 1
 272:	65 e0       	ldi	r22, 0x05	; 5
 274:	85 e0       	ldi	r24, 0x05	; 5
 276:	0e 94 47 02 	call	0x48e	; 0x48e <HAL_GDIO_PORT_Write>
 27a:	8f e3       	ldi	r24, 0x3F	; 63
 27c:	9c e9       	ldi	r25, 0x9C	; 156
 27e:	01 97       	sbiw	r24, 0x01	; 1
 280:	f1 f7       	brne	.-4      	; 0x27e <__vector_15+0x30>
 282:	00 c0       	rjmp	.+0      	; 0x284 <__vector_15+0x36>
 284:	00 00       	nop
		_delay_ms(20);
		HAL_GDIO_PORT_Write(GDIO_PORT_B, PORTB5, LOW);
 286:	40 e0       	ldi	r20, 0x00	; 0
 288:	65 e0       	ldi	r22, 0x05	; 5
 28a:	85 e0       	ldi	r24, 0x05	; 5
 28c:	0e 94 47 02 	call	0x48e	; 0x48e <HAL_GDIO_PORT_Write>
 290:	8f e3       	ldi	r24, 0x3F	; 63
 292:	9c e9       	ldi	r25, 0x9C	; 156
 294:	01 97       	sbiw	r24, 0x01	; 1
 296:	f1 f7       	brne	.-4      	; 0x294 <__vector_15+0x46>
 298:	00 c0       	rjmp	.+0      	; 0x29a <__vector_15+0x4c>
 29a:	00 00       	nop
		_delay_ms(20);
	}
 29c:	ff 91       	pop	r31
 29e:	ef 91       	pop	r30
 2a0:	bf 91       	pop	r27
 2a2:	af 91       	pop	r26
 2a4:	9f 91       	pop	r25
 2a6:	8f 91       	pop	r24
 2a8:	7f 91       	pop	r23
 2aa:	6f 91       	pop	r22
 2ac:	5f 91       	pop	r21
 2ae:	4f 91       	pop	r20
 2b0:	3f 91       	pop	r19
 2b2:	2f 91       	pop	r18
 2b4:	0f 90       	pop	r0
 2b6:	0f be       	out	0x3f, r0	; 63
 2b8:	0f 90       	pop	r0
 2ba:	1f 90       	pop	r1
 2bc:	18 95       	reti

000002be <__vector_1>:
	ISR(INT0_vect)
	{
 2be:	1f 92       	push	r1
 2c0:	0f 92       	push	r0
 2c2:	0f b6       	in	r0, 0x3f	; 63
 2c4:	0f 92       	push	r0
 2c6:	11 24       	eor	r1, r1
 2c8:	2f 93       	push	r18
 2ca:	3f 93       	push	r19
 2cc:	4f 93       	push	r20
 2ce:	5f 93       	push	r21
 2d0:	6f 93       	push	r22
 2d2:	7f 93       	push	r23
 2d4:	8f 93       	push	r24
 2d6:	9f 93       	push	r25
 2d8:	af 93       	push	r26
 2da:	bf 93       	push	r27
 2dc:	ef 93       	push	r30
 2de:	ff 93       	push	r31
		/* IRQ_Handler: EXTI0 */
		//TODO:: Please write your application code
		HAL_USART_Transmit('E');
 2e0:	85 e4       	ldi	r24, 0x45	; 69
 2e2:	0e 94 b4 02 	call	0x568	; 0x568 <HAL_USART_Transmit>
		HAL_USART_Transmit('X');
 2e6:	88 e5       	ldi	r24, 0x58	; 88
 2e8:	0e 94 b4 02 	call	0x568	; 0x568 <HAL_USART_Transmit>
		HAL_USART_Transmit('T');
 2ec:	84 e5       	ldi	r24, 0x54	; 84
 2ee:	0e 94 b4 02 	call	0x568	; 0x568 <HAL_USART_Transmit>
		HAL_USART_Transmit('I');
 2f2:	89 e4       	ldi	r24, 0x49	; 73
 2f4:	0e 94 b4 02 	call	0x568	; 0x568 <HAL_USART_Transmit>
		HAL_USART_Transmit('0');
 2f8:	80 e3       	ldi	r24, 0x30	; 48
 2fa:	0e 94 b4 02 	call	0x568	; 0x568 <HAL_USART_Transmit>
		HAL_USART_Transmit('\r');
 2fe:	8d e0       	ldi	r24, 0x0D	; 13
 300:	0e 94 b4 02 	call	0x568	; 0x568 <HAL_USART_Transmit>
		HAL_USART_Transmit('\n');
 304:	8a e0       	ldi	r24, 0x0A	; 10
 306:	0e 94 b4 02 	call	0x568	; 0x568 <HAL_USART_Transmit>
 30a:	2f ef       	ldi	r18, 0xFF	; 255
 30c:	81 ee       	ldi	r24, 0xE1	; 225
 30e:	94 e0       	ldi	r25, 0x04	; 4
 310:	21 50       	subi	r18, 0x01	; 1
 312:	80 40       	sbci	r24, 0x00	; 0
 314:	90 40       	sbci	r25, 0x00	; 0
 316:	e1 f7       	brne	.-8      	; 0x310 <__vector_1+0x52>
 318:	00 c0       	rjmp	.+0      	; 0x31a <__vector_1+0x5c>
 31a:	00 00       	nop
		_delay_ms(200);
	}
 31c:	ff 91       	pop	r31
 31e:	ef 91       	pop	r30
 320:	bf 91       	pop	r27
 322:	af 91       	pop	r26
 324:	9f 91       	pop	r25
 326:	8f 91       	pop	r24
 328:	7f 91       	pop	r23
 32a:	6f 91       	pop	r22
 32c:	5f 91       	pop	r21
 32e:	4f 91       	pop	r20
 330:	3f 91       	pop	r19
 332:	2f 91       	pop	r18
 334:	0f 90       	pop	r0
 336:	0f be       	out	0x3f, r0	; 63
 338:	0f 90       	pop	r0
 33a:	1f 90       	pop	r1
 33c:	18 95       	reti

0000033e <__vector_2>:
	ISR(INT1_vect)
	{
 33e:	1f 92       	push	r1
 340:	0f 92       	push	r0
 342:	0f b6       	in	r0, 0x3f	; 63
 344:	0f 92       	push	r0
 346:	11 24       	eor	r1, r1
		/* IRQ_Handler: EXTI1 */
		//TODO:: Please write your application code
	}
 348:	0f 90       	pop	r0
 34a:	0f be       	out	0x3f, r0	; 63
 34c:	0f 90       	pop	r0
 34e:	1f 90       	pop	r1
 350:	18 95       	reti

00000352 <__vector_18>:
	ISR(USART_RX_vect)
	{
 352:	1f 92       	push	r1
 354:	0f 92       	push	r0
 356:	0f b6       	in	r0, 0x3f	; 63
 358:	0f 92       	push	r0
 35a:	11 24       	eor	r1, r1
 35c:	2f 93       	push	r18
 35e:	3f 93       	push	r19
 360:	4f 93       	push	r20
 362:	5f 93       	push	r21
 364:	6f 93       	push	r22
 366:	7f 93       	push	r23
 368:	8f 93       	push	r24
 36a:	9f 93       	push	r25
 36c:	af 93       	push	r26
 36e:	bf 93       	push	r27
 370:	ef 93       	push	r30
 372:	ff 93       	push	r31
		/* IRQ_Handler: USART RX Interrupt */
		//TODO:: Please write your application code
		HAL_USART_Flush();
 374:	0e 94 bb 02 	call	0x576	; 0x576 <HAL_USART_Flush>
		HAL_GDIO_PORT_Write(GDIO_PORT_B, PORTB5, HIGH);
 378:	41 e0       	ldi	r20, 0x01	; 1
 37a:	65 e0       	ldi	r22, 0x05	; 5
 37c:	85 e0       	ldi	r24, 0x05	; 5
 37e:	0e 94 47 02 	call	0x48e	; 0x48e <HAL_GDIO_PORT_Write>
 382:	2f ef       	ldi	r18, 0xFF	; 255
 384:	80 e7       	ldi	r24, 0x70	; 112
 386:	92 e0       	ldi	r25, 0x02	; 2
 388:	21 50       	subi	r18, 0x01	; 1
 38a:	80 40       	sbci	r24, 0x00	; 0
 38c:	90 40       	sbci	r25, 0x00	; 0
 38e:	e1 f7       	brne	.-8      	; 0x388 <__vector_18+0x36>
 390:	00 c0       	rjmp	.+0      	; 0x392 <__vector_18+0x40>
 392:	00 00       	nop
		_delay_ms(100);
		HAL_GDIO_PORT_Write(GDIO_PORT_B, PORTB5, LOW);
 394:	40 e0       	ldi	r20, 0x00	; 0
 396:	65 e0       	ldi	r22, 0x05	; 5
 398:	85 e0       	ldi	r24, 0x05	; 5
 39a:	0e 94 47 02 	call	0x48e	; 0x48e <HAL_GDIO_PORT_Write>
 39e:	2f ef       	ldi	r18, 0xFF	; 255
 3a0:	80 e7       	ldi	r24, 0x70	; 112
 3a2:	92 e0       	ldi	r25, 0x02	; 2
 3a4:	21 50       	subi	r18, 0x01	; 1
 3a6:	80 40       	sbci	r24, 0x00	; 0
 3a8:	90 40       	sbci	r25, 0x00	; 0
 3aa:	e1 f7       	brne	.-8      	; 0x3a4 <__vector_18+0x52>
 3ac:	00 c0       	rjmp	.+0      	; 0x3ae <__vector_18+0x5c>
 3ae:	00 00       	nop
		_delay_ms(100);
	}
 3b0:	ff 91       	pop	r31
 3b2:	ef 91       	pop	r30
 3b4:	bf 91       	pop	r27
 3b6:	af 91       	pop	r26
 3b8:	9f 91       	pop	r25
 3ba:	8f 91       	pop	r24
 3bc:	7f 91       	pop	r23
 3be:	6f 91       	pop	r22
 3c0:	5f 91       	pop	r21
 3c2:	4f 91       	pop	r20
 3c4:	3f 91       	pop	r19
 3c6:	2f 91       	pop	r18
 3c8:	0f 90       	pop	r0
 3ca:	0f be       	out	0x3f, r0	; 63
 3cc:	0f 90       	pop	r0
 3ce:	1f 90       	pop	r1
 3d0:	18 95       	reti

000003d2 <__vector_20>:

	ISR(USART_TX_vect)
	{
 3d2:	1f 92       	push	r1
 3d4:	0f 92       	push	r0
 3d6:	0f b6       	in	r0, 0x3f	; 63
 3d8:	0f 92       	push	r0
 3da:	11 24       	eor	r1, r1
 3dc:	2f 93       	push	r18
 3de:	3f 93       	push	r19
 3e0:	4f 93       	push	r20
 3e2:	5f 93       	push	r21
 3e4:	6f 93       	push	r22
 3e6:	7f 93       	push	r23
 3e8:	8f 93       	push	r24
 3ea:	9f 93       	push	r25
 3ec:	af 93       	push	r26
 3ee:	bf 93       	push	r27
 3f0:	ef 93       	push	r30
 3f2:	ff 93       	push	r31
		/* IRQ_Handler: USART TX Interrupt */
		//TODO:: Please write your application code
		if(cnt == 0)
 3f4:	80 91 00 01 	lds	r24, 0x0100
 3f8:	90 91 01 01 	lds	r25, 0x0101
 3fc:	89 2b       	or	r24, r25
 3fe:	59 f4       	brne	.+22     	; 0x416 <__vector_20+0x44>
		{
			cnt++;	
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	90 93 01 01 	sts	0x0101, r25
 408:	80 93 00 01 	sts	0x0100, r24
			HAL_GDIO_PORT_Write(GDIO_PORT_B, PORTB5, LOW);
 40c:	40 e0       	ldi	r20, 0x00	; 0
 40e:	65 e0       	ldi	r22, 0x05	; 5
 410:	85 e0       	ldi	r24, 0x05	; 5
 412:	0e 94 47 02 	call	0x48e	; 0x48e <HAL_GDIO_PORT_Write>
 416:	2f ef       	ldi	r18, 0xFF	; 255
 418:	89 e6       	ldi	r24, 0x69	; 105
 41a:	98 e1       	ldi	r25, 0x18	; 24
 41c:	21 50       	subi	r18, 0x01	; 1
 41e:	80 40       	sbci	r24, 0x00	; 0
 420:	90 40       	sbci	r25, 0x00	; 0
 422:	e1 f7       	brne	.-8      	; 0x41c <__vector_20+0x4a>
 424:	00 c0       	rjmp	.+0      	; 0x426 <__vector_20+0x54>
 426:	00 00       	nop
		}
		_delay_ms(1000);
		if(cnt == 1)
 428:	80 91 00 01 	lds	r24, 0x0100
 42c:	90 91 01 01 	lds	r25, 0x0101
 430:	01 97       	sbiw	r24, 0x01	; 1
 432:	49 f4       	brne	.+18     	; 0x446 <__vector_20+0x74>
		{
			HAL_GDIO_PORT_Write(GDIO_PORT_B, PORTB5, HIGH);
 434:	41 e0       	ldi	r20, 0x01	; 1
 436:	65 e0       	ldi	r22, 0x05	; 5
 438:	85 e0       	ldi	r24, 0x05	; 5
 43a:	0e 94 47 02 	call	0x48e	; 0x48e <HAL_GDIO_PORT_Write>
			cnt = 0;
 43e:	10 92 01 01 	sts	0x0101, r1
 442:	10 92 00 01 	sts	0x0100, r1
		}
	
	
 446:	ff 91       	pop	r31
 448:	ef 91       	pop	r30
 44a:	bf 91       	pop	r27
 44c:	af 91       	pop	r26
 44e:	9f 91       	pop	r25
 450:	8f 91       	pop	r24
 452:	7f 91       	pop	r23
 454:	6f 91       	pop	r22
 456:	5f 91       	pop	r21
 458:	4f 91       	pop	r20
 45a:	3f 91       	pop	r19
 45c:	2f 91       	pop	r18
 45e:	0f 90       	pop	r0
 460:	0f be       	out	0x3f, r0	; 63
 462:	0f 90       	pop	r0
 464:	1f 90       	pop	r1
 466:	18 95       	reti

00000468 <HAL_GlobalInterrupt>:
	}
	sei();
}
void HAL_GlobalInterrupt(uint8_t setStatus)
{
	switch( setStatus )
 468:	88 23       	and	r24, r24
 46a:	21 f0       	breq	.+8      	; 0x474 <HAL_GlobalInterrupt+0xc>
 46c:	81 30       	cpi	r24, 0x01	; 1
 46e:	19 f4       	brne	.+6      	; 0x476 <HAL_GlobalInterrupt+0xe>
	{
		case GLOBAL_INT_ON:
			{
				sei();
 470:	78 94       	sei
			}
			break;
 472:	08 95       	ret
		case GLOBAL_INT_OFF:
			{
				cli();
 474:	f8 94       	cli
 476:	08 95       	ret

00000478 <HAL_GDIO_PORT_Init>:

#include "mega328p_hal_gdio.h"

void HAL_GDIO_PORT_Init(uint8_t GDIO_PIN, uint8_t GDIO_PORT_DDR, uint8_t IN_OUT)
{
	_SFR_IO8(GDIO_PORT_DDR) |= (IN_OUT  << GDIO_PIN);
 478:	e6 2f       	mov	r30, r22
 47a:	f0 e0       	ldi	r31, 0x00	; 0
 47c:	90 a1       	ldd	r25, Z+32	; 0x20
 47e:	08 2e       	mov	r0, r24
 480:	01 c0       	rjmp	.+2      	; 0x484 <HAL_GDIO_PORT_Init+0xc>
 482:	44 0f       	add	r20, r20
 484:	0a 94       	dec	r0
 486:	ea f7       	brpl	.-6      	; 0x482 <HAL_GDIO_PORT_Init+0xa>
 488:	94 2b       	or	r25, r20
 48a:	90 a3       	std	Z+32, r25	; 0x20
 48c:	08 95       	ret

0000048e <HAL_GDIO_PORT_Write>:
}
void HAL_GDIO_PORT_Write(uint8_t GDIO_PORT, uint8_t GDIO_PIN, uint8_t out_LVL)
{
	switch(out_LVL)
 48e:	44 23       	and	r20, r20
 490:	79 f0       	breq	.+30     	; 0x4b0 <HAL_GDIO_PORT_Write+0x22>
 492:	41 30       	cpi	r20, 0x01	; 1
 494:	89 f4       	brne	.+34     	; 0x4b8 <HAL_GDIO_PORT_Write+0x2a>
	{
		case HIGH: _SFR_IO8(GDIO_PORT) |= (1 << GDIO_PIN);
 496:	e8 2f       	mov	r30, r24
 498:	f0 e0       	ldi	r31, 0x00	; 0
 49a:	80 a1       	ldd	r24, Z+32	; 0x20
 49c:	21 e0       	ldi	r18, 0x01	; 1
 49e:	30 e0       	ldi	r19, 0x00	; 0
 4a0:	06 2e       	mov	r0, r22
 4a2:	01 c0       	rjmp	.+2      	; 0x4a6 <HAL_GDIO_PORT_Write+0x18>
 4a4:	22 0f       	add	r18, r18
 4a6:	0a 94       	dec	r0
 4a8:	ea f7       	brpl	.-6      	; 0x4a4 <HAL_GDIO_PORT_Write+0x16>
 4aa:	82 2b       	or	r24, r18
 4ac:	80 a3       	std	Z+32, r24	; 0x20
			break;
 4ae:	08 95       	ret
		case  LOW: _SFR_IO8(GDIO_PORT) &= (0 << GDIO_PIN);
 4b0:	e8 2f       	mov	r30, r24
 4b2:	f0 e0       	ldi	r31, 0x00	; 0
 4b4:	80 a1       	ldd	r24, Z+32	; 0x20
 4b6:	10 a2       	std	Z+32, r1	; 0x20
 4b8:	08 95       	ret

000004ba <HAL_TIM0_Init>:
//-------------------------------------------------------------//

//--------------------- Global Functions ----------------------//
//--------------------- TIM0 /8-bit Init ----------------------//
void HAL_TIM0_Init(uint8_t comp_A, uint8_t comp_B, uint8_t compA_INT, uint8_t compB_INT, uint8_t overflow_INT)
{
 4ba:	0f 93       	push	r16
}
//-------------------------/* Local Funcions */------------------------------------------------------------------------//
//------------------------/* Timer 0 / 8- bit */-----------------------------------------------------------------------//
static void _SET_TCCR0A(uint8_t COM0A_1, uint8_t COM0A_0, uint8_t COM0B_1, uint8_t COM0B_0, uint8_t WGM0_1, uint8_t WGM0_0)
{
	TCCR0A |= (COM0A_1 << COM0A1)|(COM0A_0 << COM0A0);
 4bc:	94 b5       	in	r25, 0x24	; 36
 4be:	94 bd       	out	0x24, r25	; 36
	
	TCCR0A |= (COM0B_1 << COM0B1)|(COM0B_0 << COM0B0);
 4c0:	94 b5       	in	r25, 0x24	; 36
 4c2:	94 bd       	out	0x24, r25	; 36
	
	TCCR0A |= (WGM0_1 << WGM01)|(WGM0_0 << WGM00);
 4c4:	94 b5       	in	r25, 0x24	; 36
 4c6:	92 60       	ori	r25, 0x02	; 2
 4c8:	94 bd       	out	0x24, r25	; 36
}
static void _SET_TCCR0B(uint8_t FOC0_A, uint8_t FOC0_B, uint8_t WGM0_2, uint8_t CS0_2, uint8_t CS0_1, uint8_t CS0_0)
{
	TCCR0B |= (FOC0_A << FOC0A)|(FOC0_B << FOC0B);
 4ca:	95 b5       	in	r25, 0x25	; 37
 4cc:	95 bd       	out	0x25, r25	; 37
	
	TCCR0B |= (WGM0_2 << WGM02);
 4ce:	95 b5       	in	r25, 0x25	; 37
 4d0:	95 bd       	out	0x25, r25	; 37
	
	TCCR0B |= (CS0_2 << CS02)|(CS0_1 << CS01)|(CS0_0 << CS00);
 4d2:	95 b5       	in	r25, 0x25	; 37
 4d4:	95 60       	ori	r25, 0x05	; 5
 4d6:	95 bd       	out	0x25, r25	; 37
}
static void _SET_TCNT0(uint8_t TCNT_0)
{
	TCNT0 = TCNT_0;
 4d8:	16 bc       	out	0x26, r1	; 38
{
	return TCNT0;
}
static void _SET_OCR0A(uint8_t OCR0_A)
{
	OCR0A = OCR0_A;
 4da:	87 bd       	out	0x27, r24	; 39
}
static void _SET_OCR0B(uint8_t OCR0_B)
{
	OCR0B = OCR0_B;
 4dc:	68 bd       	out	0x28, r22	; 40
{
	return OCR0B;
}
static void _SET_TIMSK0(uint8_t OCIE0_B, uint8_t OCIE0_A, uint8_t TOIE_0)
{
	TIMSK0 |= (OCIE0_B << OCIE0B);
 4de:	ee e6       	ldi	r30, 0x6E	; 110
 4e0:	f0 e0       	ldi	r31, 0x00	; 0
 4e2:	80 81       	ld	r24, Z
 4e4:	94 e0       	ldi	r25, 0x04	; 4
 4e6:	29 9f       	mul	r18, r25
 4e8:	90 01       	movw	r18, r0
 4ea:	11 24       	eor	r1, r1
 4ec:	82 2b       	or	r24, r18
 4ee:	80 83       	st	Z, r24
	TIMSK0 |= (OCIE0_A << OCIE0A);
 4f0:	80 81       	ld	r24, Z
 4f2:	44 0f       	add	r20, r20
 4f4:	48 2b       	or	r20, r24
 4f6:	40 83       	st	Z, r20
	TIMSK0 |= (TOIE_0 << TOIE0);
 4f8:	80 81       	ld	r24, Z
 4fa:	08 2b       	or	r16, r24
 4fc:	00 83       	st	Z, r16
	_SET_TCCR0B(0, 0, 0, 1, 0, 1);
	_SET_TCNT0(0x00);
	_SET_OCR0A(comp_A);
	_SET_OCR0B(comp_B);
	_SET_TIMSK0(compB_INT, compA_INT, overflow_INT);
}
 4fe:	0f 91       	pop	r16
 500:	08 95       	ret

00000502 <HAL_TIM1_Init>:
//--------------------- TIM1 /16-bit Init ---------------------//
void HAL_TIM1_Init(uint16_t comp_A, uint16_t comp_B, uint8_t compB_INT, uint8_t compA_INT, uint8_t overflow_INT)
{
 502:	0f 93       	push	r16
}
//----------------------------------------------------------------------------------------------------------------------//
//------------------------/* Timer 1 / 16- bit */-----------------------------------------------------------------------//
static void _SET_TCCR1A(uint8_t COM1A_1, uint8_t COM1A_0, uint8_t COM1B_1, uint8_t COM1B_0, uint8_t WGM1_1, uint8_t WGM1_0)
{
	TCCR1A |= (COM1A_1 << COM1A1)|(COM1A_0 << COM1A0);
 504:	e0 e8       	ldi	r30, 0x80	; 128
 506:	f0 e0       	ldi	r31, 0x00	; 0
 508:	30 81       	ld	r19, Z
 50a:	30 83       	st	Z, r19
	
	TCCR1A |= (COM1B_1 << COM1B1)|(COM1B_0 << COM1B0);
 50c:	30 81       	ld	r19, Z
 50e:	30 83       	st	Z, r19
	
	TCCR1A |= (WGM1_1 << WGM11)|(WGM1_0 << WGM10);
 510:	30 81       	ld	r19, Z
 512:	30 83       	st	Z, r19
}
static void _SET_TCCR1B(uint8_t ICNC_1, uint8_t ICES_1, uint8_t WGM1_3, uint8_t WGM1_2, uint8_t CS1_2, uint8_t CS1_1, uint8_t CS1_0)
{
	TCCR1B |= (ICNC_1 << ICNC1)|(ICES_1 << ICES1);
 514:	e1 e8       	ldi	r30, 0x81	; 129
 516:	f0 e0       	ldi	r31, 0x00	; 0
 518:	30 81       	ld	r19, Z
 51a:	30 83       	st	Z, r19
	
	TCCR1B |= (WGM1_3 << WGM13)|(WGM1_2 << WGM12);
 51c:	30 81       	ld	r19, Z
 51e:	38 60       	ori	r19, 0x08	; 8
 520:	30 83       	st	Z, r19
	
	TCCR1B |= (CS1_2 << CS12)|(CS1_1 << CS11)|(CS1_0 << CS10);
 522:	30 81       	ld	r19, Z
 524:	34 60       	ori	r19, 0x04	; 4
 526:	30 83       	st	Z, r19
{
	TCCR1C |= (FOC1_A << FOC1A)|(FOC1_B << FOC1B);
}
static void _SET_TCNT1(uint16_t TCNT1_H_L)
{
	TCNT1 = (uint16_t)TCNT1_H_L;
 528:	10 92 85 00 	sts	0x0085, r1
 52c:	10 92 84 00 	sts	0x0084, r1
}
static void _SET_OCR1A(uint16_t OCR1A_H_L)
{
	OCR1A = (uint16_t)OCR1A_H_L;
 530:	90 93 89 00 	sts	0x0089, r25
 534:	80 93 88 00 	sts	0x0088, r24
}
static void _SET_OCR1B(uint16_t OCR1B_H_L)
{
	OCR1B = (uint16_t)OCR1B_H_L;
 538:	70 93 8b 00 	sts	0x008B, r23
 53c:	60 93 8a 00 	sts	0x008A, r22
{
	ICR1H = (uint16_t)ICR1_H_L;
}
static void _SET_TIMSK1(uint8_t ICIE_1, uint8_t OCIE1_B, uint8_t OCIE1_A, uint8_t TOIE_1)
{
	TIMSK1 |= (ICIE_1 << ICIE1);
 540:	ef e6       	ldi	r30, 0x6F	; 111
 542:	f0 e0       	ldi	r31, 0x00	; 0
 544:	80 81       	ld	r24, Z
 546:	80 83       	st	Z, r24
	TIMSK1 |= (OCIE1_B << OCIE1B);
 548:	80 81       	ld	r24, Z
 54a:	94 e0       	ldi	r25, 0x04	; 4
 54c:	49 9f       	mul	r20, r25
 54e:	a0 01       	movw	r20, r0
 550:	11 24       	eor	r1, r1
 552:	84 2b       	or	r24, r20
 554:	80 83       	st	Z, r24
	TIMSK1 |= (OCIE1_A << OCIE1A);
 556:	80 81       	ld	r24, Z
 558:	22 0f       	add	r18, r18
 55a:	28 2b       	or	r18, r24
 55c:	20 83       	st	Z, r18
	TIMSK1 |= (TOIE_1 << TOIE1);
 55e:	80 81       	ld	r24, Z
 560:	08 2b       	or	r16, r24
 562:	00 83       	st	Z, r16
	_SET_TCCR1B(0, 0, 0, 1, 1, 0, 0);
	_SET_TCNT1(0x0000);
	_SET_OCR1A(comp_A);
	_SET_OCR1B(comp_B);
	_SET_TIMSK1(0, compB_INT, compA_INT, overflow_INT);
}
 564:	0f 91       	pop	r16
 566:	08 95       	ret

00000568 <HAL_USART_Transmit>:
}

void HAL_USART_Transmit(unsigned char data)
{
	/* Wait for empty transmit buffer */
	while (!(UCSR0A & (1<<UDRE0)));
 568:	90 91 c0 00 	lds	r25, 0x00C0
 56c:	95 ff       	sbrs	r25, 5
 56e:	fc cf       	rjmp	.-8      	; 0x568 <HAL_USART_Transmit>
	/* Put data into buffer, send the data */
	UDR0 = data;
 570:	80 93 c6 00 	sts	0x00C6, r24
 574:	08 95       	ret

00000576 <HAL_USART_Flush>:
}

void HAL_USART_Flush(void)
{
	unsigned char dummy;
	while (UCSR0A & (1<<RXC0)) dummy = UDR0;
 576:	80 91 c0 00 	lds	r24, 0x00C0
 57a:	87 ff       	sbrs	r24, 7
 57c:	03 c0       	rjmp	.+6      	; 0x584 <HAL_USART_Flush+0xe>
 57e:	80 91 c6 00 	lds	r24, 0x00C6
 582:	f9 cf       	rjmp	.-14     	; 0x576 <HAL_USART_Flush>
 584:	08 95       	ret

00000586 <_exit>:
 586:	f8 94       	cli

00000588 <__stop_program>:
 588:	ff cf       	rjmp	.-2      	; 0x588 <__stop_program>
